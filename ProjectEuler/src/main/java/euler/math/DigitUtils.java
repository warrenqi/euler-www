package euler.math;

import java.util.SortedSet;

import org.apache.commons.lang3.StringUtils;

import gnu.trove.list.array.TIntArrayList;
import it.unimi.dsi.fastutil.ints.IntRBTreeSet;

public class DigitUtils
{
    public static void main(String[] args)
    {
        System.out.println(truncateDigitsFromLeft(123456789));
        System.out.println(truncateDigitsFromRight(123456789));
        System.out.println(numDigits(999) + " = 3");
        System.out.println(numDigits(1000) + " = 4");
    }

    /**
     * The sequence of triangle numbers is generated by adding the natural
     * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
     * 28. The first ten terms would be:
     * 
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     * 
     */
    public static int[] getTriangleNums(int limit)
    {
        int[] res = new int[limit];

        for (int i = 0; i < limit; i++)
        {
            res[i] = i + 1;
        }
        for (int i = 1; i < limit; i++)
        {
            res[i] = res[i] + res[i - 1];
        }
        return res;
    }

    /**
     * A naive way to factorize (get all unique divisors). Includes input number
     * X in the output
     */
    public static SortedSet<Integer> factorize(int x)
    {
        SortedSet<Integer> res = new IntRBTreeSet();
        int midpt = (int) Math.sqrt(x);

        for (int i = 1; i <= midpt; i++)
        {
            if (x % i == 0)
            {
                res.add(i);
                res.add(x / i);
            }
        }

        return res;
    }

    public static int numDigits(long input)
    {
        return 1 + (int) Math.log10(input);
    }

    public static TIntArrayList truncateDigitsFromLeft(int input)
    {
        TIntArrayList truncations = new TIntArrayList();

        int modulus = 10;
        int truncated_input;
        while ((truncated_input = input % modulus) != input)
        {
            truncations.add(truncated_input);
            modulus = modulus * 10;
        }
        truncations.add(input);
        return truncations;
    }

    public static TIntArrayList truncateDigitsFromRight(int input)
    {
        TIntArrayList truncations = new TIntArrayList();
        truncations.add(input);

        int truncated_input;
        int divisor = 10;
        while ((truncated_input = input / divisor) != 0)
        {
            truncations.add(truncated_input);
            divisor = divisor * 10;
        }
        return truncations;
    }

    public static boolean isPalindrome(long number)
    {
        String tmp = String.valueOf(number);
        return tmp.equals(StringUtils.reverse(tmp));
    }

}
